"""mlschema.core.domain.base_field
==================================
Pydantic base model that encapsulates the **common** metadata of any
field generated by *mlschema*.

- ``title``       - Human-readable field name (usually the column name
  in the *DataFrame*).
- ``description`` - Optional text that expands the meaning of the field.
- ``required``    - Indicates if the column lacks null values.

The model uses ``extra='forbid'`` to avoid undeclared keys and
remains mutable (``frozen=False``) so that *FieldStrategy* instances
can adjust values before final serialization.
"""

from __future__ import annotations

from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class BaseField(BaseModel):
    """Standard metadata present in **all** fields.

    Attributes
    ----------
    title:
        Human-readable field identifier (1-100 characters).
    description:
        Optional description (max. 500 characters).
    required:
        ``True`` if the original column contains no null values.
    """

    model_config = ConfigDict(extra="forbid", frozen=False)

    title: Annotated[str, Field(min_length=1, max_length=100)]
    description: Annotated[str | None, Field(max_length=500)] = None
    required: bool = True
