name: CI Pipeline

on:
  push:
    branches: [main, docs, develop, config, application, domain]
  pull_request:
    branches: [main, develop, 'release/*']

jobs:
  pre-commit:
    name: Run pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install UV CLI
        run: pip install uv

      - name: Create and activate virtual environment
        run: |
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo ".venv/bin" >> $GITHUB_PATH

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml', 'pyproject.toml', 'uv.lock') }}

      - name: Cache UV
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}

      # Do NOT install the package itself here; only tools
      - name: Install dev tools (locked, no-editable)
        run: uv sync --group dev --no-editable

      - name: Run pre-commit hooks
        run: uv run pre-commit run --all-files

  docs:
    name: Build MkDocs site
    runs-on: ubuntu-latest
    needs: pre-commit
    env:
      # Allow mkdocstrings to resolve your package without installing it
      PYTHONPATH: src
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install UV CLI
        run: pip install uv

      - name: Create and activate virtual environment
        run: |
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo ".venv/bin" >> $GITHUB_PATH

      - name: Cache UV
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}

      # Only docs deps; skip installing the package itself
      - name: Install docs deps (locked, no-editable)
        run: uv sync --group docs --no-editable

      - name: Build MkDocs (strict)
        run: uv run mkdocs build --strict

      - name: Upload built docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: ./site
          if-no-files-found: error
          retention-days: 7

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install UV CLI
        run: pip install uv

      - name: Create and activate virtual environment
        run: |
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo ".venv/bin" >> $GITHUB_PATH

      - name: Cache UV
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}

      # Here we DO install the project in editable mode (default) + test deps
      - name: Install test deps (locked)
        run: uv sync --group test

      - name: Run tests with coverage
        run: |
          uv run pytest \
            --maxfail=1 \
            --disable-warnings \
            --cov=src \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [pre-commit, tests, docs]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for trusted publishing
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      published: ${{ steps.publish.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install UV CLI
        run: pip install uv

      - name: Get package version
        id: get_version
        run: |
          VERSION=$(uv run python -c "import sys; sys.path.insert(0, 'src'); from mlschema import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Build package (PEP 517)
        run: uv build

      - name: Publish to PyPI
        id: publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        if: steps.publish.outcome == 'success'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## 🎉 MLSchema v${{ steps.get_version.outputs.version }}

            ### 📦 Package Published
            - **PyPI**: https://pypi.org/project/mlschema/${{ steps.get_version.outputs.version }}/
            - **Install**: `pip install mlschema==${{ steps.get_version.outputs.version }}`

            ### 📚 Documentation
            - **Docs**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/

            ### 📝 Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: false
          generate_release_notes: true

  deploy-docs:
    name: Deploy documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: publish
    if: needs.publish.outputs.published == 'true'
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download built docs
        uses: actions/download-artifact@v4
        with:
          name: mkdocs-site
          path: ./site

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
